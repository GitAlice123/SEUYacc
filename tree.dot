digraph Tree {
node0[label= "int"];
node1[label= "type_specifier"];
node1 -> node0;
node2[label= "declaration_specifiers"];
node2 -> node1;
node3[label= "i"];
node4[label= "direct_declarator"];
node4 -> node3;
node5[label= "declarator"];
node5 -> node4;
node6[label= "1"];
node7[label= "primary_expression"];
node7 -> node6;
node8[label= "postfix_expression"];
node8 -> node7;
node9[label= "unary_expression"];
node9 -> node8;
node10[label= "cast_expression"];
node10 -> node9;
node11[label= "multiplicative_expression"];
node11 -> node10;
node12[label= "additive_expression"];
node12 -> node11;
node13[label= "shift_expression"];
node13 -> node12;
node14[label= "relational_expression"];
node14 -> node13;
node15[label= "equality_expression"];
node15 -> node14;
node16[label= "and_expression"];
node16 -> node15;
node17[label= "exclusive_or_expression"];
node17 -> node16;
node18[label= "inclusive_or_expression"];
node18 -> node17;
node19[label= "logical_and_expression"];
node19 -> node18;
node20[label= "logical_or_expression"];
node20 -> node19;
node21[label= "conditional_expression"];
node21 -> node20;
node22[label= "assignment_expression"];
node22 -> node21;
node23[label= "initializer"];
node23 -> node22;
node24[label= "init_declarator"];
node24 -> node23;
node25[label= "="];
node24 -> node25;
node24 -> node5;
node26[label= "init_declarator_list"];
node26 -> node24;
node27[label= ";"];
node28[label= "declaration"];
node28 -> node27;
node28 -> node26;
node28 -> node2;
node29[label= "external_declaration"];
node29 -> node28;
node30[label= "translation_unit"];
node30 -> node29;
}
